{
  "contractName": "ERC865Token",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}}},\"title\":\"ERC865Token Token * ERC865Token allows users paying transfers in tokens instead of gas https://github.com/ethereum/EIPs/issues/865 \"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/george/Development/props/props-token-distribution/contracts/token/ERC865Token.sol\":\"ERC865Token\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/george/Development/props/props-token-distribution/contracts/token/ERC865Token.sol\":{\"keccak256\":\"0x13ec86b7f6509a70674e94bdd570443ab1032a693abc5bec67fb1dd1ddf5bca8\",\"urls\":[\"bzzr://624dbda42d8e44204c13b60f4369cdecd976b57ec4a6a884ed8ea3b52e4a7cfd\"]},\"/home/george/Development/props/props-token-distribution/contracts/token/IERC865.sol\":{\"keccak256\":\"0x94b2dffbb5a3429040ea84c2d9186185ad4ed32402bd0ce3310e79aa7750f2cf\",\"urls\":[\"bzzr://bd4e55bed687adc411bc7201427a87a5cafc6dea0482859c438cccd6bccfe817\"]},\"openzeppelin-eth/contracts/cryptography/ECDSA.sol\":{\"keccak256\":\"0x223f5e7e2fe8d7082e3c49a2b930096369c2beb960d751c80e1495556952420a\",\"urls\":[\"bzzr://8a9559aaad12d8dddc40e7bb3db79dc533b239ad77c55f96a56bea9f28baa987\"]},\"openzeppelin-eth/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xca27427124232a675642ba45303b78d5a36e1207ee222030ef249e11eba5a224\",\"urls\":[\"bzzr://013c67962737acca577ecd24e6b6c80f85b05fd03c1c75ab68f65a084f4b4cfd\"]},\"openzeppelin-eth/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x24252d4567a1cbf14d609a8308e491359c9200d58a2e78282938d945aeeb2bb3\",\"urls\":[\"bzzr://61401aaae518b765df91e443ef9dfb7af874341921829a063cb4804a6fb49c5e\"]},\"openzeppelin-eth/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x0786a09def412e5a92e1da8545114b39f9bbd8bd1ba6f62a5bf8b81f54ab25bf\",\"urls\":[\"bzzr://b35dbbf6dd505fcb601ca968d4628714a3af84024224228433eadf700e94f250\"]},\"zos-lib/contracts/Initializable.sol\":{\"keccak256\":\"0xac4cc87395794e21e95549a1b4002881621d59878c4129d534a0089ce5cf7212\",\"urls\":[\"bzzr://1725ac3e1941f8e2bf5c1966abd66bd744d40c85ae8195eb697ec3256bc1fc39\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a97806100206000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b31461009357806318160ddd146100f857806323b872dd1461012357806339509351146101a857806370a082311461020d578063a457c2d714610264578063a9059cbb146102c9578063dd62ed3e1461032e575b600080fd5b34801561009f57600080fd5b506100de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103a5565b604051808215151515815260200191505060405180910390f35b34801561010457600080fd5b5061010d6103bc565b6040518082815260200191505060405180910390f35b34801561012f57600080fd5b5061018e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103c6565b604051808215151515815260200191505060405180910390f35b3480156101b457600080fd5b506101f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610477565b604051808215151515815260200191505060405180910390f35b34801561021957600080fd5b5061024e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061051c565b6040518082815260200191505060405180910390f35b34801561027057600080fd5b506102af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610565565b604051808215151515815260200191505060405180910390f35b3480156102d557600080fd5b50610314600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061060a565b604051808215151515815260200191505060405180910390f35b34801561033a57600080fd5b5061038f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610621565b6040518082815260200191505060405180910390f35b60006103b23384846106a8565b6001905092915050565b6000603554905090565b60006103d384848461080b565b61046c843361046785603460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a2990919063ffffffff16565b6106a8565b600190509392505050565b6000610512338461050d85603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a4a90919063ffffffff16565b6106a8565b6001905092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061060033846105fb85603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a2990919063ffffffff16565b6106a8565b6001905092915050565b600061061733848461080b565b6001905092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156106e457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561072057600080fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561085957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561089557600080fd5b6108e781603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a2990919063ffffffff16565b603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061097c81603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a4a90919063ffffffff16565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080838311151515610a3b57600080fd5b82840390508091505092915050565b6000808284019050838110151515610a6157600080fd5b80915050929150505600a165627a7a72305820e6e74e4f4f7498428028a45db1e2e23da92fe7f83e81e3039544f7635eebc9060029",
  "deployedBytecode": "0x60806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b31461009357806318160ddd146100f857806323b872dd1461012357806339509351146101a857806370a082311461020d578063a457c2d714610264578063a9059cbb146102c9578063dd62ed3e1461032e575b600080fd5b34801561009f57600080fd5b506100de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103a5565b604051808215151515815260200191505060405180910390f35b34801561010457600080fd5b5061010d6103bc565b6040518082815260200191505060405180910390f35b34801561012f57600080fd5b5061018e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103c6565b604051808215151515815260200191505060405180910390f35b3480156101b457600080fd5b506101f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610477565b604051808215151515815260200191505060405180910390f35b34801561021957600080fd5b5061024e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061051c565b6040518082815260200191505060405180910390f35b34801561027057600080fd5b506102af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610565565b604051808215151515815260200191505060405180910390f35b3480156102d557600080fd5b50610314600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061060a565b604051808215151515815260200191505060405180910390f35b34801561033a57600080fd5b5061038f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610621565b6040518082815260200191505060405180910390f35b60006103b23384846106a8565b6001905092915050565b6000603554905090565b60006103d384848461080b565b61046c843361046785603460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a2990919063ffffffff16565b6106a8565b600190509392505050565b6000610512338461050d85603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a4a90919063ffffffff16565b6106a8565b6001905092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061060033846105fb85603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a2990919063ffffffff16565b6106a8565b6001905092915050565b600061061733848461080b565b6001905092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156106e457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561072057600080fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561085957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561089557600080fd5b6108e781603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a2990919063ffffffff16565b603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061097c81603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a4a90919063ffffffff16565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080838311151515610a3b57600080fd5b82840390508091505092915050565b6000808284019050838110151515610a6157600080fd5b80915050929150505600a165627a7a72305820e6e74e4f4f7498428028a45db1e2e23da92fe7f83e81e3039544f7635eebc9060029",
  "sourceMap": "481:13434:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;481:13434:0;;;;;;;",
  "deployedSourceMap": "481:13434:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2462:145:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2462:145:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;702:83;;8:9:-1;5:2;;;30:1;27;20:12;5:2;702:83:8;;;;;;;;;;;;;;;;;;;;;;;2879:240;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2879:240:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3570:212;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3570:212:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;986:98;;8:9:-1;5:2;;;30:1;27;20:12;5:2;986:98:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4238:222;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4238:222:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1703:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1703:127:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1401:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1401:150:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2462:145;2527:4;2543:36;2552:10;2564:7;2573:5;2543:8;:36::i;:::-;2596:4;2589:11;;2462:145;;;;:::o;702:83::-;746:7;768:12;;761:19;;702:83;:::o;2879:240::-;2982:4;3000:26;3010:4;3016:2;3020:5;3000:9;:26::i;:::-;3032:65;3041:4;3047:10;3059:37;3090:5;3059:8;:14;3068:4;3059:14;;;;;;;;;;;;;;;:26;3074:10;3059:26;;;;;;;;;;;;;;;;:30;;:37;;;;:::i;:::-;3032:8;:65::i;:::-;3110:4;3103:11;;2879:240;;;;;:::o;3570:212::-;3670:4;3684:76;3693:10;3705:7;3714:45;3748:10;3714:8;:20;3723:10;3714:20;;;;;;;;;;;;;;;:29;3735:7;3714:29;;;;;;;;;;;;;;;;:33;;:45;;;;:::i;:::-;3684:8;:76::i;:::-;3773:4;3766:11;;3570:212;;;;:::o;986:98::-;1041:7;1063:9;:16;1073:5;1063:16;;;;;;;;;;;;;;;;1056:23;;986:98;;;:::o;4238:222::-;4343:4;4357:81;4366:10;4378:7;4387:50;4421:15;4387:8;:20;4396:10;4387:20;;;;;;;;;;;;;;;:29;4408:7;4387:29;;;;;;;;;;;;;;;;:33;;:50;;;;:::i;:::-;4357:8;:81::i;:::-;4451:4;4444:11;;4238:222;;;;:::o;1703:127::-;1764:4;1776:32;1786:10;1798:2;1802:5;1776:9;:32::i;:::-;1821:4;1814:11;;1703:127;;;;:::o;1401:150::-;1498:7;1522:8;:15;1531:5;1522:15;;;;;;;;;;;;;;;:24;1538:7;1522:24;;;;;;;;;;;;;;;;1515:31;;1401:150;;;;:::o;6263:248::-;6374:1;6355:21;;:7;:21;;;;6347:30;;;;;;;;6412:1;6395:19;;:5;:19;;;;6387:28;;;;;;;;6453:5;6426:8;:15;6435:5;6426:15;;;;;;;;;;;;;;;:24;6442:7;6426:24;;;;;;;;;;;;;;;:32;;;;6489:7;6473:31;;6482:5;6473:31;;;6498:5;6473:31;;;;;;;;;;;;;;;;;;6263:248;;;:::o;4660:277::-;4752:9;:15;4762:4;4752:15;;;;;;;;;;;;;;;;4743:5;:24;;4735:33;;;;;;;;4796:1;4782:16;;:2;:16;;;;4774:25;;;;;;;;4824:26;4844:5;4824:9;:15;4834:4;4824:15;;;;;;;;;;;;;;;;:19;;:26;;;;:::i;:::-;4806:9;:15;4816:4;4806:15;;;;;;;;;;;;;;;:44;;;;4872:24;4890:5;4872:9;:13;4882:2;4872:13;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;4856:9;:13;4866:2;4856:13;;;;;;;;;;;;;;;:40;;;;4922:2;4907:25;;4916:4;4907:25;;;4926:5;4907:25;;;;;;;;;;;;;;;;;;4660:277;;;:::o;1079:131:7:-;1137:7;1173:9;1165:1;1160;:6;;1152:15;;;;;;;;1189:1;1185;:5;1173:17;;1204:1;1197:8;;1079:131;;;;;:::o;1273:::-;1331:7;1346:9;1362:1;1358;:5;1346:17;;1382:1;1377;:6;;1369:15;;;;;;;;1398:1;1391:8;;1273:131;;;;;:::o",
  "source": "pragma solidity ^0.4.24;\n/*\n THIS CONTRACT IS OBSOLETE AND REMAINS ONLY FOR UPGRADABILITY/STORAGE CONSIDERATIONS\n*/\nimport \"zos-lib/contracts/Initializable.sol\";\nimport \"openzeppelin-eth/contracts/token/ERC20/ERC20.sol\";\nimport { ECDSA } from \"openzeppelin-eth/contracts/cryptography/ECDSA.sol\";\nimport \"./IERC865.sol\";\n\n/**\n * @title ERC865Token Token\n *\n * ERC865Token allows users paying transfers in tokens instead of gas\n * https://github.com/ethereum/EIPs/issues/865\n *\n */\n\ncontract ERC865Token is Initializable, ERC20, IERC865 {\n\n    /* hashed tx of transfers performed */\n    mapping(bytes32 => bool) hashedTxs;\n    // /**\n    //  * @dev Submit a presigned transfer\n    //  * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //  * @param _signature bytes The signature, issued by the owner.\n    //  * @param _to address The address which you want to transfer to.\n    //  * @param _value uint256 The amount of tokens to be transferred.\n    //  * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    //  * @param _nonce uint256 Presigned transaction number.\n    //  */\n    // function transferPreSigned(\n    //     bytes _signature,\n    //     address _to,\n    //     uint256 _value,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     returns (bool)\n    // {\n    //     require(_to != address(0), \"Invalid _to address\");\n\n    //     bytes32 hashedParams = getTransferPreSignedHash(address(this), _to, _value, _fee, _nonce);\n    //     address from = ECDSA.recover(hashedParams, _signature);\n    //     require(from != address(0), \"Invalid from address recovered\");\n    //     bytes32 hashedTx = keccak256(abi.encodePacked(from, hashedParams));\n    //     require(hashedTxs[hashedTx] == false,\"Transaction hash was already used\");\n    //     hashedTxs[hashedTx] = true;\n    //     _transfer(from, _to, _value);\n    //     _transfer(from, msg.sender, _fee);\n\n    //     emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n    //     return true;\n    // }\n\n    // /**\n    //  * @dev Submit a presigned approval\n    //  * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //  * @param _signature bytes The signature, issued by the owner.\n    //  * @param _spender address The address which will spend the funds.\n    //  * @param _value uint256 The amount of tokens to allow.\n    //  * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    //  * @param _nonce uint256 Presigned transaction number.\n    //  */\n    // function approvePreSigned(\n    //     bytes _signature,\n    //     address _spender,\n    //     uint256 _value,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     returns (bool)\n    // {\n    //     require(_spender != address(0),\"Invalid _spender address\");\n\n    //     bytes32 hashedParams = getApprovePreSignedHash(address(this), _spender, _value, _fee, _nonce);\n    //     address from = ECDSA.recover(hashedParams, _signature);\n    //     require(from != address(0),\"Invalid from address recovered\");\n    //     bytes32 hashedTx = keccak256(abi.encodePacked(from, hashedParams));\n    //     require(hashedTxs[hashedTx] == false,\"Transaction hash was already used\");\n    //     hashedTxs[hashedTx] = true;\n    //     _approve(from, _spender, _value);\n    //     _transfer(from, msg.sender, _fee);\n\n    //     emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n    //     return true;\n    // }\n\n    // /**\n    //  * @dev Increase the amount of tokens that an owner allowed to a spender.\n    //  * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //  * @param _signature bytes The signature, issued by the owner.\n    //  * @param _spender address The address which will spend the funds.\n    //  * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n    //  * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    //  * @param _nonce uint256 Presigned transaction number.\n    //  */\n    // function increaseAllowancePreSigned(\n    //     bytes _signature,\n    //     address _spender,\n    //     uint256 _addedValue,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     returns (bool)\n    // {\n    //     require(_spender != address(0),\"Invalid _spender address\");\n\n    //     bytes32 hashedParams = getIncreaseAllowancePreSignedHash(address(this), _spender, _addedValue, _fee, _nonce);\n    //     address from = ECDSA.recover(hashedParams, _signature);\n    //     require(from != address(0),\"Invalid from address recovered\");\n    //     bytes32 hashedTx = keccak256(abi.encodePacked(from, hashedParams));\n    //     require(hashedTxs[hashedTx] == false,\"Transaction hash was already used\");\n    //     hashedTxs[hashedTx] = true;\n    //     _approve(from, _spender, allowance(from, _spender).add(_addedValue));\n    //     _transfer(from, msg.sender, _fee);\n\n    //     emit ApprovalPreSigned(from, _spender, msg.sender, allowance(from, _spender), _fee);\n    //     return true;\n    // }\n\n    // /**\n    //  * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    //  * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //  * @param _signature bytes The signature, issued by the owner\n    //  * @param _spender address The address which will spend the funds.\n    //  * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n    //  * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    //  * @param _nonce uint256 Presigned transaction number.\n    //  */\n    // function decreaseAllowancePreSigned(\n    //     bytes _signature,\n    //     address _spender,\n    //     uint256 _subtractedValue,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     returns (bool)\n    // {\n    //     require(_spender != address(0),\"Invalid _spender address\");\n\n    //     bytes32 hashedParams = getDecreaseAllowancePreSignedHash(address(this), _spender, _subtractedValue, _fee, _nonce);\n    //     address from = ECDSA.recover(hashedParams, _signature);\n    //     require(from != address(0),\"Invalid from address recovered\");\n    //     bytes32 hashedTx = keccak256(abi.encodePacked(from, hashedParams));\n    //     require(hashedTxs[hashedTx] == false,\"Transaction hash was already used\");\n    //     // if substractedValue is greater than allowance will fail as allowance is uint256\n    //     hashedTxs[hashedTx] = true;\n    //     _approve(from, _spender, allowance(from,_spender).sub(_subtractedValue));\n    //     _transfer(from, msg.sender, _fee);\n\n    //     emit ApprovalPreSigned(from, _spender, msg.sender, allowance(from, _spender), _fee);\n    //     return true;\n    // }\n\n    // /**\n    //  * @dev Transfer tokens from one address to another\n    //  * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //  * @param _signature bytes The signature, issued by the spender.\n    //  * @param _from address The address which you want to send tokens from.\n    //  * @param _to address The address which you want to transfer to.\n    //  * @param _value uint256 The amount of tokens to be transferred.\n    //  * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n    //  * @param _nonce uint256 Presigned transaction number.\n    //  */\n    // function transferFromPreSigned(\n    //     bytes _signature,\n    //     address _from,\n    //     address _to,\n    //     uint256 _value,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     returns (bool)\n    // {\n    //     require(_to != address(0),\"Invalid _to address\");\n\n    //     bytes32 hashedParams = getTransferFromPreSignedHash(address(this), _from, _to, _value, _fee, _nonce);\n\n    //     address spender = ECDSA.recover(hashedParams, _signature);\n    //     require(spender != address(0),\"Invalid spender address recovered\");\n    //     bytes32 hashedTx = keccak256(abi.encodePacked(spender, hashedParams));\n    //     require(hashedTxs[hashedTx] == false,\"Transaction hash was already used\");\n    //     hashedTxs[hashedTx] = true;\n    //     _transfer(_from, _to, _value);\n    //     _approve(_from, spender, allowance(_from, spender).sub(_value));\n    //     _transfer(spender, msg.sender, _fee);\n\n    //     emit TransferPreSigned(_from, _to, msg.sender, _value, _fee);\n    //     return true;\n    // }\n\n\n    // /**\n    //  * @dev Hash (keccak256) of the payload used by transferPreSigned\n    //  * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //  * @param _token address The address of the token.\n    //  * @param _to address The address which you want to transfer to.\n    //  * @param _value uint256 The amount of tokens to be transferred.\n    //  * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    //  * @param _nonce uint256 Presigned transaction number.\n    //  */\n    // function getTransferPreSignedHash(\n    //     address _token,\n    //     address _to,\n    //     uint256 _value,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     pure\n    //     returns (bytes32)\n    // {\n    //     /* \"0d98dcb1\": getTransferPreSignedHash(address,address,uint256,uint256,uint256) */\n    //     return keccak256(abi.encodePacked(bytes4(0x0d98dcb1), _token, _to, _value, _fee, _nonce));\n    // }\n\n    // /**\n    //  * @dev Hash (keccak256) of the payload used by approvePreSigned\n    //  * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //  * @param _token address The address of the token\n    //  * @param _spender address The address which will spend the funds.\n    //  * @param _value uint256 The amount of tokens to allow.\n    //  * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    //  * @param _nonce uint256 Presigned transaction number.\n    //  */\n    // function getApprovePreSignedHash(\n    //     address _token,\n    //     address _spender,\n    //     uint256 _value,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     pure\n    //     returns (bytes32)\n    // {\n    //     /* \"79250dcf\": getApprovePreSignedHash(address,address,uint256,uint256,uint256) */\n    //     return keccak256(abi.encodePacked(bytes4(0x79250dcf), _token, _spender, _value, _fee, _nonce));\n    // }\n\n    // /**\n    //  * @dev Hash (keccak256) of the payload used by increaseAllowancePreSigned\n    //  * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //  * @param _token address The address of the token\n    //  * @param _spender address The address which will spend the funds.\n    //  * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n    //  * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    //  * @param _nonce uint256 Presigned transaction number.\n    //  */\n    // function getIncreaseAllowancePreSignedHash(\n    //     address _token,\n    //     address _spender,\n    //     uint256 _addedValue,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     pure\n    //     returns (bytes32)\n    // {\n    //     /* \"138e8da1\": getIncreaseAllowancePreSignedHash(address,address,uint256,uint256,uint256) */\n    //     return keccak256(abi.encodePacked(bytes4(0x138e8da1), _token, _spender, _addedValue, _fee, _nonce));\n    // }\n\n    //  /**\n    //   * @dev Hash (keccak256) of the payload used by decreaseAllowancePreSigned\n    //   * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //   * @param _token address The address of the token\n    //   * @param _spender address The address which will spend the funds.\n    //   * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n    //   * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    //   * @param _nonce uint256 Presigned transaction number.\n    //   */\n    // function getDecreaseAllowancePreSignedHash(\n    //     address _token,\n    //     address _spender,\n    //     uint256 _subtractedValue,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     pure\n    //     returns (bytes32)\n    // {\n    //     /* \"5229c56f\": getDecreaseAllowancePreSignedHash(address,address,uint256,uint256,uint256) */\n    //     return keccak256(abi.encodePacked(bytes4(0x5229c56f), _token, _spender, _subtractedValue, _fee, _nonce));\n    // }\n\n    // /**\n    //  * @dev Hash (keccak256) of the payload used by transferFromPreSigned\n    //  * @notice fee will be given to sender if it's a smart contract make sure it can accept funds\n    //  * @param _token address The address of the token\n    //  * @param _from address The address which you want to send tokens from.\n    //  * @param _to address The address which you want to transfer to.\n    //  * @param _value uint256 The amount of tokens to be transferred.\n    //  * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n    //  * @param _nonce uint256 Presigned transaction number.\n    //  */\n    // function getTransferFromPreSignedHash(\n    //     address _token,\n    //     address _from,\n    //     address _to,\n    //     uint256 _value,\n    //     uint256 _fee,\n    //     uint256 _nonce\n    // )\n    //     public\n    //     pure\n    //     returns (bytes32)\n    // {\n    //     /* \"a70c41b4\": getTransferFromPreSignedHash(address,address,address,uint256,uint256,uint256) */\n    //     return keccak256(abi.encodePacked(bytes4(0xa70c41b4), _token, _from, _to, _value, _fee, _nonce));\n    // }\n}",
  "sourcePath": "/home/george/Development/props/props-token-distribution/contracts/token/ERC865Token.sol",
  "ast": {
    "absolutePath": "/home/george/Development/props/props-token-distribution/contracts/token/ERC865Token.sol",
    "exportedSymbols": {
      "ERC865Token": [
        17
      ]
    },
    "id": 18,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "absolutePath": "zos-lib/contracts/Initializable.sol",
        "file": "zos-lib/contracts/Initializable.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 18,
        "sourceUnit": 1433,
        "src": "116:45:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-eth/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-eth/contracts/token/ERC20/ERC20.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 18,
        "sourceUnit": 1179,
        "src": "162:58:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-eth/contracts/cryptography/ECDSA.sol",
        "file": "openzeppelin-eth/contracts/cryptography/ECDSA.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 18,
        "sourceUnit": 649,
        "src": "221:74:0",
        "symbolAliases": [
          {
            "foreign": 4,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/george/Development/props/props-token-distribution/contracts/token/IERC865.sol",
        "file": "./IERC865.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 18,
        "sourceUnit": 21,
        "src": "296:23:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1432,
              "src": "505:13:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$1432",
                "typeString": "contract Initializable"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "505:13:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 9,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1178,
              "src": "520:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$1178",
                "typeString": "contract ERC20"
              }
            },
            "id": 10,
            "nodeType": "InheritanceSpecifier",
            "src": "520:5:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 11,
              "name": "IERC865",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 20,
              "src": "527:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC865_$20",
                "typeString": "contract IERC865"
              }
            },
            "id": 12,
            "nodeType": "InheritanceSpecifier",
            "src": "527:7:0"
          }
        ],
        "contractDependencies": [
          20,
          1178,
          1314,
          1432
        ],
        "contractKind": "contract",
        "documentation": "@title ERC865Token Token\n * ERC865Token allows users paying transfers in tokens instead of gas\nhttps://github.com/ethereum/EIPs/issues/865\n ",
        "fullyImplemented": true,
        "id": 17,
        "linearizedBaseContracts": [
          17,
          20,
          1178,
          1314,
          1432
        ],
        "name": "ERC865Token",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 16,
            "name": "hashedTxs",
            "nodeType": "VariableDeclaration",
            "scope": 17,
            "src": "585:34:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
              "typeString": "mapping(bytes32 => bool)"
            },
            "typeName": {
              "id": 15,
              "keyType": {
                "id": 13,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "593:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "585:24:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                "typeString": "mapping(bytes32 => bool)"
              },
              "valueType": {
                "id": 14,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "604:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          }
        ],
        "scope": 18,
        "src": "481:13434:0"
      }
    ],
    "src": "0:13915:0"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/home/george/Development/props/props-token-distribution/contracts/token/ERC865Token.sol",
      "exportedSymbols": {
        "ERC865Token": [
          17
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.4",
            ".24"
          ]
        },
        "id": 1,
        "name": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "attributes": {
          "SourceUnit": 1433,
          "absolutePath": "zos-lib/contracts/Initializable.sol",
          "file": "zos-lib/contracts/Initializable.sol",
          "scope": 18,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 2,
        "name": "ImportDirective",
        "src": "116:45:0"
      },
      {
        "attributes": {
          "SourceUnit": 1179,
          "absolutePath": "openzeppelin-eth/contracts/token/ERC20/ERC20.sol",
          "file": "openzeppelin-eth/contracts/token/ERC20/ERC20.sol",
          "scope": 18,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 3,
        "name": "ImportDirective",
        "src": "162:58:0"
      },
      {
        "attributes": {
          "SourceUnit": 649,
          "absolutePath": "openzeppelin-eth/contracts/cryptography/ECDSA.sol",
          "file": "openzeppelin-eth/contracts/cryptography/ECDSA.sol",
          "scope": 18,
          "symbolAliases": [
            {
              "foreign": 4,
              "local": null
            }
          ],
          "unitAlias": ""
        },
        "id": 5,
        "name": "ImportDirective",
        "src": "221:74:0"
      },
      {
        "attributes": {
          "SourceUnit": 21,
          "absolutePath": "/home/george/Development/props/props-token-distribution/contracts/token/IERC865.sol",
          "file": "./IERC865.sol",
          "scope": 18,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 6,
        "name": "ImportDirective",
        "src": "296:23:0"
      },
      {
        "attributes": {
          "contractDependencies": [
            20,
            1178,
            1314,
            1432
          ],
          "contractKind": "contract",
          "documentation": "@title ERC865Token Token\n * ERC865Token allows users paying transfers in tokens instead of gas\nhttps://github.com/ethereum/EIPs/issues/865\n ",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            17,
            20,
            1178,
            1314,
            1432
          ],
          "name": "ERC865Token",
          "scope": 18
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "Initializable",
                  "referencedDeclaration": 1432,
                  "type": "contract Initializable"
                },
                "id": 7,
                "name": "UserDefinedTypeName",
                "src": "505:13:0"
              }
            ],
            "id": 8,
            "name": "InheritanceSpecifier",
            "src": "505:13:0"
          },
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "ERC20",
                  "referencedDeclaration": 1178,
                  "type": "contract ERC20"
                },
                "id": 9,
                "name": "UserDefinedTypeName",
                "src": "520:5:0"
              }
            ],
            "id": 10,
            "name": "InheritanceSpecifier",
            "src": "520:5:0"
          },
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "IERC865",
                  "referencedDeclaration": 20,
                  "type": "contract IERC865"
                },
                "id": 11,
                "name": "UserDefinedTypeName",
                "src": "527:7:0"
              }
            ],
            "id": 12,
            "name": "InheritanceSpecifier",
            "src": "527:7:0"
          },
          {
            "attributes": {
              "constant": false,
              "name": "hashedTxs",
              "scope": 17,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "mapping(bytes32 => bool)",
              "value": null,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "type": "mapping(bytes32 => bool)"
                },
                "children": [
                  {
                    "attributes": {
                      "name": "bytes32",
                      "type": "bytes32"
                    },
                    "id": 13,
                    "name": "ElementaryTypeName",
                    "src": "593:7:0"
                  },
                  {
                    "attributes": {
                      "name": "bool",
                      "type": "bool"
                    },
                    "id": 14,
                    "name": "ElementaryTypeName",
                    "src": "604:4:0"
                  }
                ],
                "id": 15,
                "name": "Mapping",
                "src": "585:24:0"
              }
            ],
            "id": 16,
            "name": "VariableDeclaration",
            "src": "585:34:0"
          }
        ],
        "id": 17,
        "name": "ContractDefinition",
        "src": "481:13434:0"
      }
    ],
    "id": 18,
    "name": "SourceUnit",
    "src": "0:13915:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-04-02T09:51:14.557Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    },
    "title": "ERC865Token Token * ERC865Token allows users paying transfers in tokens instead of gas https://github.com/ethereum/EIPs/issues/865 "
  },
  "userdoc": {
    "methods": {}
  }
}